scilla_version 0
library SSNListProxy
let zero = Uint128 0
let one_msg =
  fun (m: Message) =>
    let e = Nil {Message} in
    Cons {Message} m e
type SsnRewardShare =
| SsnRewardShare of ByStr20 Uint128
type SSNCycleInfo =
| SSNCycleInfo of Uint128 Uint128
(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract SSNListProxy(
  init_implementation: ByStr20,
  init_gzil_contract: ByStr20,
  init_admin: ByStr20
)

(* Mutable fields *)
field implementation: ByStr20 = init_implementation
field gzil_contract: ByStr20 = init_gzil_contract
field admin: ByStr20 = init_admin

(* Transitions belong proxy itself *)
transition UpgradeTo(newImplementation: ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      implementation := newImplementation;
      e = {_eventname: "Upgraded"; implementation_address: newImplementation};
      event e
    | False =>
      e = {_eventname: "upgradeTo FailedNotAdmin"; newImplementation: newImplementation};
      event e
    end
end

transition ChangeProxyAdmin(newAdmin: ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      admin := newAdmin;
      e = {_eventname: "AdminChanged"; oldAdmin: currentAdmin; newAdmin: newAdmin};
      event e
    | False =>
      e = {_eventname: "changeAdmin FailedNotAdmin"; newAdmin: newAdmin};
      event e
    end
end

transition UpgradeGZILContract(newAddress: ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      gzil_contract := newAddress;
      e = {_eventname: "Gzil Upgraded"; gzil_address: newAddress};
      event e
    | False =>
      e = {_eventname: "UpgradeGZILContract FailedNotAdmin"; gzil_address: newAddress};
      event e
    end
end

(* Transitions will be sent to ssnlist implemetion *)
transition Pause()
    current_impl <- implementation;
    msg = {_tag: "Pause"; _recipient: current_impl; _amount: zero; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition UnPause()
    current_impl <- implementation;
    msg = {_tag: "UnPause"; _recipient: current_impl; _amount: zero; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition UpdateAdmin(new_admin: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "UpdateAdmin"; _recipient: current_impl; _amount: zero; admin: new_admin; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Set the verifier of contract. Used by admin only. *)
(* @param verif: New verifier value *)
transition UpdateVerifier(verif: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "UpdateVerifier"; _recipient: current_impl; _amount: zero; verif: verif; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Set the admin of contract. Used by current admin only. *)
transition DrainContractBalance(amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "DrainContractBalance"; _recipient: current_impl; _amount: zero; initiator: _sender; amt: amt};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Set the minstake, maxstake and contract maxstake of contract. Used by admin only. *)
(* @param min_stake: New min_stake value *)
(* @param min_deleg_stake: New mindelegstake value *)
transition UpdateStakingParameters(min_stake: Uint128, min_deleg_stake: Uint128, max_comm_change_rate: Uint128)
    current_impl <- implementation;
    msg = {_tag: "UpdateStakingParameters"; _recipient: current_impl; _amount: zero; min_stake: min_stake; min_deleg_stake: min_deleg_stake; max_comm_change_rate: max_comm_change_rate; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition UpdateContractAddr(proxy_address: ByStr20, gzil_address: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "UpdateContractAddr"; _recipient: current_impl; _amount: zero; proxy_addr: proxy_address; gzil_addr: gzil_address; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Adds new ssn to ssnlist. Used by admin only. *)
(* @param ssnaddr: Address of the ssn to be added *)
(* @param name: Name of the ssn to be added *)
(* @param urlraw: string representing "ip:port" of the ssn serving raw api request *)
(* @param urlapi: string representing url exposed by ssn serving public api request *)
(* @param buff_deposit: Any buffered stake deposit *)
(* @param comm: Percentage of incoming rewards that the SSN takes *)
transition AddSSN(ssnaddr: ByStr20, name: String, urlraw: String, urlapi: String, comm: Uint128)
    current_impl <- implementation;
    msg = {_tag: "AddSSN"; _recipient: current_impl; _amount: zero; ssnaddr: ssnaddr; name: name; urlraw: urlraw; urlapi: urlapi; comm: comm; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition UpdateSSN(ssnaddr: ByStr20, new_name: String, new_urlraw: String, new_urlapi: String)
    current_impl <- implementation;
    msg = {_tag: "UpdateSSN"; _recipient: current_impl; _amount: zero; ssnaddr: ssnaddr; new_name: new_name; new_urlraw: new_urlraw; new_urlapi: new_urlapi; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition AddSSNAfterUpgrade(ssnaddr: ByStr20, stake_amt: Uint128, rewards: Uint128, name: String, urlraw: String, urlapi: String, buff_deposit: Uint128,  comm: Uint128, comm_rewards: Uint128, rec_addr: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "AddSSNAfterUpgrade"; _recipient: current_impl; _amount: zero; ssnaddr: ssnaddr; stake_amt: stake_amt; rewards: rewards; name: name; urlraw: urlraw; urlapi: urlapi; buff_deposit: buff_deposit; comm: comm; comm_rewards: comm_rewards; rec_addr: rec_addr; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Adds a new deleg. Used by admin only during contract upgrade. *)
(* @param ssnaddr: Address of the ssn *)
(* @param deleg: Address of the deleg *)
(* @param stake_amount: Stake amount *)
(* @param rewards: Rewards of the ssn to be added *)
transition UpdateDeleg(ssnaddr: ByStr20, deleg: ByStr20, stake_amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "UpdateDeleg"; _recipient: current_impl; _amount: zero; ssnaddr: ssnaddr; deleg: deleg; stake_amt: stake_amt; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Remove a specific ssn from ssnlist. Used by verifier only. *)
(* @param ssnaddr: Address of the ssn to be removed *)
transition RemoveSSN(ssnaddr: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "RemoveSSN"; _recipient: current_impl; _amount: zero; ssnaddr: ssnaddr; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev : To update the commision rate for a given SSN *)
(* @param new_rate: The new commision rate *)
transition UpdateComm(new_rate: Uint128)
    current_impl <- implementation;
    msg = {_tag: "UpdateComm"; _recipient: current_impl; _amount: zero; new_rate: new_rate; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev : To update the received address for a given SSN *)
(* @param new_address: The new received address *)
transition UpdateReceivedAddr(new_addr: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "UpdateReceivedAddr"; _recipient: current_impl; _amount: zero; new_addr: new_addr; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev : To delegate the stake to the contract. *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
transition DelegateStake(ssnaddr: ByStr20)
    current_impl <- implementation;
    accept;
    msg = {_tag: "DelegateStake"; _recipient: current_impl; _amount: _amount; ssnaddr: ssnaddr; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Assign stake reward to all ssn from ssnlist. Used by verifier only. *)
(* @param ssnrewardlist: List of SsnRewardShare *)
transition AssignStakeReward(ssnreward_list: List SsnRewardShare)
    current_impl <- implementation;
    msg = {_tag: "AssignStakeReward"; _recipient: current_impl; _amount: zero; ssnreward_list: ssnreward_list; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition WithdrawComm()
    current_impl <- implementation;
    msg = {_tag: "WithdrawComm"; _recipient: current_impl; _amount: zero; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Withdraw stake reward. Can be called by a deleg. *)
transition WithdrawStakeRewards(ssn_operator: ByStr20)
    current_impl <- implementation;
    msg = {_tag: "WithdrawStakeRewards"; _recipient: current_impl; _amount: zero; ssn_operator: ssn_operator; deleg: _sender};
    msgs = one_msg msg;
    send msgs
end

transition WithdrawStakeAmt(ssn: ByStr20, amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "WithdrawStakeAmt"; _recipient: current_impl; _amount: zero; ssn: ssn; initiator: _sender; amt: amt};
    msgs = one_msg msg;
    send msgs
end

(* @dev: Move token amount from _sender to recipient i.e. contract address. *)
transition AddFunds()
    current_impl <- implementation;
    accept;
    msg = {_tag: "AddFunds"; _recipient: current_impl; _amount: _amount; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition UpdateRewardCycleList(list: List Uint128, last_cycle: Uint128)
    current_impl <- implementation;
    msg = {_tag: "UpdateRewardCycleList"; _recipient: current_impl; _amount: zero; list: list; last_cycle: last_cycle; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateCommForSSN(ssn_addr: ByStr20, cycle: Uint128, comm: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateCommForSSN"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; cycle: cycle; comm: comm; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateStakeSSNPerCycle(ssn_addr: ByStr20, cycle: Uint128, info: SSNCycleInfo)
    current_impl <- implementation;
    msg = {_tag: "PopulateStakeSSNPerCycle"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; cycle: cycle; info: info; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateLastWithdrawCycleForDeleg(deleg_address: ByStr20, ssn_addr: ByStr20, cycle: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateLastWithdrawCycleForDeleg"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; deleg_addr: deleg_address; cycle: cycle; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateBuffDeposit(deleg_addr: ByStr20, ssn_addr: ByStr20, cycle: Uint128, amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateBuffDeposit"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; deleg_addr: deleg_addr; cycle: cycle; amt: amt; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateDirectDeposit(deleg_addr: ByStr20, ssn_addr: ByStr20, cycle: Uint128, amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateDirectDeposit"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; deleg_addr: deleg_addr; cycle: cycle; amt: amt; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateDepositAmtForDeleg(deleg_addr: ByStr20, ssn_addr: ByStr20, amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateDepositAmtForDeleg"; _recipient: current_impl; _amount: zero; ssn_addr: ssn_addr; deleg_addr: deleg_addr; amt: amt; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end

transition PopulateTotalStakeAmt(amt: Uint128)
    current_impl <- implementation;
    msg = {_tag: "PopulateTotalStakeAmt"; _recipient: current_impl; _amount: zero; amt: amt; initiator: _sender};
    msgs = one_msg msg;
send msgs
end

(* Transitions will be sent to gZIL implemetion *)
transition ChangeMinter(new_minter: ByStr20)
    gzil <- gzil_contract;
    msg = {_tag: "ChangeMinter"; _recipient: gzil; _amount: zero; new_minter: new_minter; initiator: _sender};
    msgs = one_msg msg;
    send msgs
end
