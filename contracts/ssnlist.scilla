scilla_version 0

import BoolUtils

library SSNList

let one_msg =
  fun (m : Message) =>
    let e = Nil {Message} in
    Cons {Message} m e

let uint128_zero = Uint128 0
let const_true = True
let const_false = False
let uint128_10_power_7 = Uint128 10000000
let empty_tag = ""
let add_funds_tag = "AddFunds"
let multisig_tag_addfunds = "AddFunds"
let max_ssn_node_number = Uint32 20

(* events *)

let mk_contract_frozen_error =
  fun (sender : ByStr20) =>
    { _exception : "Contract frozen failure"; sender : sender }

let mk_verifier_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Verifier validation failed"; sender : sender }

let mk_admin_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Admin validation failed"; sender : sender }

let mk_proxy_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Proxy validation failed"; sender : sender }


let mk_ssn_not_exists_error =
  fun (ssn : ByStr20) =>
    { _exception : "SSN doesn't exist"; ssn_address : ssn }

let mk_ssn_list_full_error =
  fun (sender : ByStr20) =>
    { _exception : "SSN list already full"; sender : sender }

let mk_ssn_already_exists_error =
  fun (ssn : ByStr20) =>
    { _exception : "SSN already exists"; ssn_address : ssn }

let mk_ssn_added_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN added"; ssn_address : ssn }

let mk_update_staking_parameter_error =
  fun (sender : ByStr20) =>
    fun (min_stake : Uint128) =>
      fun (max_stake : Uint128) =>
        fun (contract_max_stake : Uint128) =>
         { _exception : "Update staking parameter error"; sender : sender; min_stake : min_stake; max_stake : max_stake; contract_max_stake : contract_max_stake }

let mk_update_staking_parameter_event =
  fun (sender : ByStr20) =>
    { _eventname : "Update staking parameter event"; sender : sender}

let mk_ssn_not_exists_error =
  fun (ssn : ByStr20) =>
    { _exception : "SSN doesn't exist"; ssn_address : ssn }

let mk_ssn_removed_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN removed"; ssn_address : ssn }

let mk_stake_deposit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
    { _eventname : "SSN updated stake"; ssn_address : ssn; new_stake_amount : amount }

let mk_stake_buffered_deposit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
    { _eventname : "SSN updated buffered stake"; ssn_address : ssn; new_stake_amount : amount }

let mk_stake_deposit_below_stake_limit_error =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (minstake : Uint128) =>
    { _exception : "SSN stake deposit below min_stake limit"; ssn_address : ssn; requested_deposit : amount; min_stake : minstake }

let mk_stake_deposit_above_stake_limit_error =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (maxstake : Uint128) =>
    { _exception : "SSN stake deposit above max_stake limit"; ssn_address : ssn; requested_deposit : amount; max_stake : maxstake }

let mk_total_stake_deposit_above_contract_stake_limit_error =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (contractmaxstake : Uint128) =>
    { _exception : "SSN stake deposit will result in contract stake deposit go above limit"; ssn_address : ssn; requested_deposit : amount; contract_max_stake : contractmaxstake }

let mk_assign_stake_reward_event =
  fun (ssn : ByStr20) =>
  fun (total_reward : Uint128) =>
    { _eventname : "SSN assign reward"; ssn_address : ssn; total_reward : total_reward }

let mk_withdraw_stake_rewards_event =
  fun (ssn : ByStr20) =>
  fun (total_reward: Uint128) =>
    { _eventname : "SSN withdraw reward"; ssn_address : ssn; withdraw_total_reward : total_reward }

 let mk_add_funds_event =
  fun (sender : ByStr20) =>
    { _eventname : "Verifier add funds"; verifier : sender }

 let mk_withdraw_below_stake_limit_error =
    fun (ssn : ByStr20) =>
    fun (minstake: Uint128) =>
      { _exception : "SSN withdrawal below min_stake limit"; ssn_address : ssn; minstake_limit : minstake }

 let mk_withdraw_above_stake_error =
    fun (ssn : ByStr20) =>
      { _exception : "SSN withdrawal above stake"; ssn_address : ssn }

 let mk_withdraw_stake_buffered_deposit_exist_error =
    fun (ssn : ByStr20) =>
    fun (buffdeposit: Uint128) =>
      { _exception : "SSN withdrawal not allowed when some deposit is bufferred"; ssn_address : ssn; buffered_stake_amount : buffdeposit }

(* Ssn - active_status , stake_amount, rewards, urlraw, urlapi, buffereddeposit *)
type ActiveStatus =
| Active
| Inactive

let const_active = Active
let const_inactive = Inactive

let active_status_from_neg_bool =
  fun (cur_status : Bool) =>
    match cur_status with
    | True => const_inactive
    | False => const_active
    end

type Ssn =
| Ssn of ActiveStatus Uint128 Uint128 String String Uint128

(* address reward_percentage *)
type SsnRewardShare =
| SsnRewardShare of ByStr20 Uint128

(***************************************************)
(*             The contract definition             *)
(***************************************************)

(* Roles in this contract *)
(* init_admin: Initial admin during deployment of this contract *)
(* contractadmin: Current admin of contract. For updating of the contract parameters and draining contract balance *)
(* verifier: Reward SSN for SSN contribution *)
(* Ssn: Staked seed node operator that has stake their deposit in return for stake rewards *)

contract SSNList(
  init_admin : ByStr20,
  proxy_address : ByStr20
)

(* Mutable fields *)

field ssnlist : Map ByStr20 Ssn = Emp ByStr20 Ssn
field verifier : Option ByStr20 = None {ByStr20}
field minstake : Uint128 = Uint128 0
field maxstake : Uint128 = Uint128 0
field contractmaxstake : Uint128 = Uint128 0
field totalstakedeposit : Uint128 = Uint128 0
field contractadmin : ByStr20  = init_admin
field lastrewardblocknum : Uint128 = Uint128 0
field paused : Bool = True

(* Procedures *)

(* Can be called by the verifier only *)
procedure validate_verifier (initiator : ByStr20)
  verifier_l <- verifier;
  match verifier_l with
  | Some v =>
    is_verifier = builtin eq initiator v;
    match is_verifier with
    | True =>
    | False =>
      e = mk_verifier_validation_failed_error initiator;
      throw e
    end
  | None =>
    e = mk_verifier_validation_failed_error initiator;
    throw e
  end
end

(* Can be called by the current contract admin only *)
procedure validate_admin (initiator : ByStr20)
  contractadmin_l <- contractadmin;
  is_admin = builtin eq initiator contractadmin_l;
  match is_admin with
  | True =>
  | False =>
    e = mk_admin_validation_failed_error initiator;
    throw e
  end
end

(* Can be called by the proxy only *)
procedure validate_proxy ()
  is_proxy = builtin eq _sender proxy_address;
  match is_proxy with
  | True =>
  | False =>
    e = mk_proxy_validation_failed_error _sender;
    throw e
  end
end

(* Can be called by the proxy only *)
procedure validate_not_paused ()
  paused_l <- paused;
  match paused_l with
  | False =>
  | True =>
    e = mk_contract_frozen_error _sender;
    throw e
  end
end

procedure TransferFunds (tag: String, amount : Uint128, recipient : ByStr20)
    msg = {_tag : tag; _recipient : recipient; _amount : amount};
    msgs = one_msg msg;
    send msgs
end

(* Can be called by the proxy only *)
procedure update_stake_reward (entry : SsnRewardShare)
  match entry with
  | SsnRewardShare ssnaddr reward_percent =>
    curval <- ssnlist[ssnaddr];
    match curval with
    | None =>
      e = mk_ssn_not_exists_error ssnaddr;
      throw e
    | Some (Ssn status stake_amount rewards urlraw urlapi buffereddeposit) =>
      hundred = Uint128 100;
      new_reward = builtin mul stake_amount reward_percent;
      new_reward = builtin div new_reward hundred;
      new_reward = builtin div new_reward uint128_10_power_7;
      total_reward = builtin add new_reward rewards;
      new_stake_amount = builtin add stake_amount buffereddeposit;
      ssn = Ssn status new_stake_amount total_reward urlraw urlapi uint128_zero;
      ssnlist[ssnaddr] := ssn;
      e = mk_assign_stake_reward_event ssnaddr total_reward;
      event e
    end
  end
end

(* Transitions *)

(* @dev: pause/freeze the contract. Used by admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition pause(initiator: ByStr20)
    validate_proxy;
    validate_admin initiator;
    paused := const_true
end

(* @dev: unpause/unfreeze the contract. Used by admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition unpause(initiator: ByStr20)
    validate_proxy;
    validate_admin initiator;
    paused := const_false
end

(* @dev: Set the admin of contract. Used by admin only. *)
(* @param admin: New admin value *)
(* @param initiator: The original caller who called the proxy *)
transition update_admin (admin : ByStr20, initiator: ByStr20)
  validate_proxy;
  validate_admin initiator;
  contractadmin := admin
end

(* @dev: Set the verifier of contract. Used by admin only. *)
(* @param verif: New verifier value *)
(* @param initiator: The original caller who called the proxy *)
transition update_verifier (verif : ByStr20, initiator: ByStr20)
  validate_proxy;
  validate_admin initiator;
  newverifier = Some {ByStr20} verif;
  verifier := newverifier
end

(* This transition should only be invoked when *)
(* 1. There is a security bug in the contract and draining of fund is required to prevent lost of funds *)
(* 2. There is an upgrade of contract and funds have to be transfered to the new implementation. *)
(* @dev: Drain the entire contract balance. Used by current admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition drain_contract_balance (initiator : ByStr20)
  validate_proxy;
  validate_admin initiator;
  bal <- _balance;
  TransferFunds multisig_tag_addfunds bal initiator
end

(* @dev: Set the staking parameters of contract. Used by admin only. *)
(* @param min_stake: New minstake value *)
(* @param max_stake: New maxstake value *)
(* @param contract_max_stake: New contract maxstake value *)
(* @param initiator: The original caller who called the proxy *)
transition update_staking_parameter (min_stake : Uint128, max_stake : Uint128, contract_max_stake : Uint128, initiator : ByStr20)
  validate_not_paused;
  validate_proxy;
  validate_admin initiator;
  less_than = builtin lt min_stake max_stake;
  match less_than with
  | True =>
    less_than = builtin lt max_stake contract_max_stake;
    match less_than with
    | True =>
      minstake := min_stake;
      maxstake := max_stake;
      contractmaxstake := contract_max_stake;
      e = mk_update_staking_parameter_event initiator;
      event e
    | False =>
      e = mk_update_staking_parameter_error initiator min_stake max_stake contract_max_stake;
      throw e
    end
  | False =>
     e = mk_update_staking_parameter_error initiator min_stake max_stake contract_max_stake;
     throw e
  end

end

(* @dev: Adds new ssn to ssnlist. Used by admin only. *)
(* @param ssnaddr: Address of the ssn to be added *)
(* @param urlraw: string representing "ip:port" of the ssn serving raw api request *)
(* @param urlapi: string representing url exposed by ssn serving public api request *)
(* @param initiator: The original caller who called the proxy *)
transition add_ssn (ssnaddr : ByStr20, urlraw : String, urlapi : String, initiator : ByStr20)
  validate_not_paused;
  validate_proxy;
  validate_admin initiator;
  already_exists <- exists ssnlist[ssnaddr];
  match already_exists with
  | True =>
    e = mk_ssn_already_exists_error ssnaddr;
    throw e
  | False =>
    ssns <- ssnlist;
    current_ssn_number = builtin size ssns;
    less_than_max = builtin lt current_ssn_number max_ssn_node_number;
    match less_than_max with
    | True =>
      stake_amount = Uint128 0;
      status = const_inactive;
      buffered_deposit = Uint128 0;
      rewards = Uint128 0;
      s = Ssn status stake_amount rewards urlraw urlapi buffered_deposit;
      ssnlist[ssnaddr] := s;
      e = mk_ssn_added_event ssnaddr;
      event e      
    | False =>
      e = mk_ssn_list_full_error initiator;
      throw e
    end
  end
end

(* @dev: Adds new ssn to ssnlist. Used by admin only. *)
(* @dev: Only used for contract upgrade *)
(* @param ssnaddr: Address of the ssn to be added *)
(* @param stake_amount: Stake amount of ssn *)
(* @param rewards: Rewards of the ssn to be added *)
(* @param urlraw: string representing "ip:port" of the ssn serving raw api request *)
(* @param urlapi: string representing url exposed by ssn serving public api request *)
(* @param buffered_deposit: Any buffered stake deposit *)
(* @param initiator: The original caller who called the proxy *)
transition add_ssn_after_upgrade (ssnaddr : ByStr20, stake_amount : Uint128, rewards : Uint128, urlraw : String, urlapi : String, buffered_deposit : Uint128, initiator : ByStr20)
  validate_not_paused;
  validate_proxy;
  validate_admin initiator;
  already_exists <- exists ssnlist[ssnaddr];
  match already_exists with
  | True =>
    e = mk_ssn_already_exists_error ssnaddr;
    throw e
  | False =>
    ssns <- ssnlist;
    current_ssn_number = builtin size ssns;
    less_than_max = builtin lt current_ssn_number max_ssn_node_number;
    match less_than_max with
    | True =>
      pass = builtin eq stake_amount uint128_zero;
      (* set status as inactive if stake_amount is 0 *)
      status = active_status_from_neg_bool pass;
      match pass with
      | True =>
      | False =>
        (* Update the total stake deposit *)
        temp_total_stake_deposit <- totalstakedeposit;
        deposit_amount = builtin add stake_amount buffered_deposit;
        new_total_stake_deposit = builtin add temp_total_stake_deposit deposit_amount;
        totalstakedeposit := new_total_stake_deposit
      end;
      s = Ssn status stake_amount rewards urlraw urlapi buffered_deposit;
      ssnlist[ssnaddr] := s
    | False =>
      e = mk_ssn_list_full_error initiator;
      throw e
    end
  end
end

(* @dev: Remove a specific ssn from ssnlist. Used by admin only. *)
(* @param ssnaddr: Address of the ssn to be removed *)
(* @param initiator: The original caller who called the proxy *)
transition remove_ssn (ssnaddr : ByStr20, initiator: ByStr20)
  validate_not_paused;
  validate_proxy;
  validate_admin initiator;
  ssn_optional <- ssnlist[ssnaddr];
  match ssn_optional with
  | Some (Ssn _ stake_amount rewards urlraw urlapi buffereddeposit) =>
    funds_temp = builtin add stake_amount rewards;
    funds = builtin add funds_temp buffereddeposit;
    TransferFunds add_funds_tag funds ssnaddr;
    delete ssnlist[ssnaddr];
    totalstakedeposit_l <- totalstakedeposit;
    deposit_amount = builtin add stake_amount buffereddeposit;
    tmp = builtin sub totalstakedeposit_l deposit_amount;
    totalstakedeposit := tmp;
    e = mk_ssn_removed_event ssnaddr;
    event e
  | None =>
    e = mk_ssn_not_exists_error ssnaddr;
    throw e
  end
end


(* @dev: Moves an amount tokens from initiator to the recipient. Used by token_owner. i.e. ssn *)
(* @dev: Stake amount of existing ssn in ssnlist will be updated with new amount only if existing stake amount is 0. Balance of contract account will increase. Balance of initiator will decrease.      *)
(* @param initiator: The original caller who called the proxy *)
transition stake_deposit (initiator: ByStr20)
  validate_not_paused;
  validate_proxy;
  (* Accept the deposit from SSN and add to contract balance. *)
  (* Transfer back to initiator if any of the validation failed *)
  accept;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    e = mk_ssn_not_exists_error initiator;
    throw e
  | Some (Ssn _ stake_amount rewards urlraw urlapi buffereddeposit) =>
    (* check if first non-zero deposit *)
    minstake_l <- minstake;
    maxstake_l <- maxstake;
    new_buff_amount = builtin add _amount buffereddeposit;
    new_stake_amount = builtin add new_buff_amount stake_amount;
    pass = builtin lt new_stake_amount minstake_l;
    match pass with
    | True => (* stake deposit below minstake limit *)
      e = mk_stake_deposit_below_stake_limit_error initiator new_stake_amount minstake_l;
      throw e
    | False =>
      pass = builtin lt maxstake_l new_stake_amount;
      match pass with
      | True => (* stake deposit above maxstake limit *)
        e = mk_stake_deposit_above_stake_limit_error initiator new_stake_amount maxstake_l;
        throw e
      | False =>
        totalstakedeposit_l <- totalstakedeposit;
        newStakeDeposit = builtin add totalstakedeposit_l _amount;
        contractmaxstake_l <- contractmaxstake;
        pass = builtin lt contractmaxstake_l newStakeDeposit;
        match pass with
        | True => (* total stake deposit for contract goes above contractmaxstake limit *)
          e = mk_total_stake_deposit_above_contract_stake_limit_error initiator new_stake_amount contractmaxstake_l;
          throw e
        | False =>
          (* Check if its first time deposit or redeposit of stake after withdrawal of all stake *)
          pass = builtin eq stake_amount uint128_zero;
          match pass with
          | True =>
            ssn = Ssn const_active _amount rewards urlraw urlapi uint128_zero;
            ssnlist[initiator] := ssn;
            e = mk_stake_deposit_event initiator _amount;
            event e
          | False =>
            (* Update new buffered deposit until next assign_stake_reward is finished *)
            ssn = Ssn const_active stake_amount rewards urlraw urlapi new_buff_amount;
            ssnlist[initiator] := ssn;
            e = mk_stake_buffered_deposit_event initiator _amount;
            event e
          end;
          (* Update the new total stake deposit of contract *)
          totalstakedeposit := newStakeDeposit
        end
      end
    end
  end
end

(* @dev: Assign stake reward to all ssn from ssnlist. Used by verifier only. *)
(* @param ssnrewardlist: List of SsnRewardShare *)
(* @param reward_blocknum: tx block num when ssns were verified *)
(* @param initiator: The original caller who called the proxy *)
transition assign_stake_reward (ssnreward_list : List SsnRewardShare, reward_blocknum : Uint128, initiator: ByStr20)
  validate_not_paused;
  validate_proxy;
  validate_verifier initiator;
  forall ssnreward_list update_stake_reward;
  lastrewardblocknum := reward_blocknum
end

(* @dev: Withdraw stake reward. Used by ssn only. *)
(* @param initiator: The original caller who called the proxy *)
transition withdraw_stake_rewards (initiator : ByStr20)
  validate_not_paused;
  validate_proxy;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    e = mk_ssn_not_exists_error initiator;
    throw e
  | Some (Ssn status stake_amount rewards urlraw urlapi buffereddeposit) =>
    (* check if basic stake deposit is already withdrawn by ssn. If so, remove the ssn from list as well *)
    pass = builtin eq stake_amount uint128_zero;
    match pass with
    | True =>
      (* entire stake withdrawn and also reward is withdrawn, so remove ssn *)
      delete ssnlist[initiator]
    | False =>
      (* Update state to have 0 rewards. *)
      ssn = Ssn status stake_amount uint128_zero urlraw urlapi buffereddeposit;
      ssnlist[initiator] := ssn
    end;
    TransferFunds add_funds_tag rewards initiator;
    e = mk_withdraw_stake_rewards_event initiator rewards;
    event e
  end
end

(* @dev: Move token amount from contract account to initiator. Used by ssn only. *)
(* @param amount: token amount to be withdrawn *)
(* @param initiator: The original caller who called the proxy *)
transition withdraw_stake_amount (amount : Uint128, initiator: ByStr20)
  validate_not_paused;
  validate_proxy;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    e = mk_ssn_not_exists_error initiator;
    throw e
  | Some (Ssn status stake_amount rewards urlraw urlapi buffereddeposit) =>
    pass = builtin eq buffereddeposit uint128_zero;
    match pass with
    | False =>
      e = mk_withdraw_stake_buffered_deposit_exist_error initiator buffereddeposit;
      throw e
    | True =>
      pass = builtin lt amount stake_amount;
      match pass with
      | True => (* Partial withdrawal. so check for min balance after withdrawal for min stake limit *)
          bal_left = builtin sub stake_amount amount;
          minstake_l <- minstake;
          pass = builtin lt bal_left minstake_l;
          match pass with
          | True =>
            e = mk_withdraw_below_stake_limit_error initiator minstake_l;
            throw e
          | False => (* pass minstake check for withdrawal *)
            (* Update the stake amount *)
            ssn = Ssn status bal_left rewards urlraw urlapi buffereddeposit;
            ssnlist[initiator] := ssn;
            (* Update the total stake deposit with contract *)
            totalstakedeposit_l <- totalstakedeposit;
            tmp = builtin sub totalstakedeposit_l amount;
            totalstakedeposit := tmp;
            TransferFunds add_funds_tag amount initiator
          end
      | False => (* requested withdrawal equals balance or greater than balance *)
          pass = builtin eq amount stake_amount;
          match pass with
          | False => (* withdrawal above available balance *)
            e = mk_withdraw_above_stake_error initiator;
            throw e
          | True => (* pass withdrawal checks *)
            pass = builtin eq rewards uint128_zero;
            match pass with
            | True =>
              (* entire stake withdrawed and also reward is withdrawed, so remove ssn *)
              delete ssnlist[initiator]
            | False =>
              ssn = Ssn const_inactive uint128_zero rewards urlraw urlapi buffereddeposit;
              ssnlist[initiator] := ssn
            end;
            totalstakedeposit_l <- totalstakedeposit;
            tmp = builtin sub totalstakedeposit_l amount;
            totalstakedeposit := tmp;
            TransferFunds add_funds_tag amount initiator
          end
        end
    end
  end
end

(* @dev: Move token amount from initiator to recipient i.e. contract address. *)
(* @param initiator: The original caller who called the proxy *)
transition AddFunds (initiator : ByStr20)
  validate_not_paused;
  validate_proxy;
  accept;
  e = mk_add_funds_event initiator;
  event e
end