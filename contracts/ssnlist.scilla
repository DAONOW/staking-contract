scilla_version 0

library SSNList

let one_msg =
  fun (m : Message) =>
    let e = Nil {Message} in
    Cons {Message} m e

let uint128_zero = Uint128 0
let bool_active = True
let bool_inactive = False
let uint128_10_power_7 = Uint128 10000000
let empty_tag = ""
let multisig_tag_addfunds = "AddFunds"
(* events *)

let mk_contract_freezed_error =
  fun (sender : ByStr20) =>
    { _exception : "Contract freezed failure"; sender : sender }

let mk_verifier_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Verifier validation failed"; sender : sender }

let mk_admin_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Admin validation failed"; sender : sender }

let mk_proxy_validation_failed_error =
  fun (sender : ByStr20) =>
    { _exception : "Proxy validation failed"; sender : sender }


let mk_ssn_already_exists_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN already exists"; ssn_address : ssn }

let mk_ssn_added_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN added"; ssn_address : ssn }

let mk_ssn_not_exists_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN doesn't exist"; ssn_address : ssn }

let mk_ssn_removed_event =
  fun (ssn : ByStr20) =>
    { _eventname : "SSN removed"; ssn_address : ssn }

let mk_stake_deposit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
    { _eventname : "SSN updated stake"; ssn_address : ssn; new_stake_amount : amount }

let mk_stake_deposit_below_stake_limit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (minstake : Uint128) =>
    { _eventname : "SSN stake deposit below min_stake limit"; ssn_address : ssn; requested_deposit : amount; min_stake : minstake }

let mk_stake_deposit_above_stake_limit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (maxstake : Uint128) =>
    { _eventname : "SSN stake deposit above max_stake limit"; ssn_address : ssn; requested_deposit : amount; max_stake : maxstake }

let mk_total_stake_deposit_above_contract_stake_limit_event =
  fun (ssn : ByStr20) =>
  fun (amount : Uint128) =>
  fun (contractmaxstake : Uint128) =>
    { _eventname : "SSN stake deposit will result in contract stake deposit go above limit"; ssn_address : ssn; requested_deposit : amount; contract_max_stake : contractmaxstake }

let mk_assign_stake_reward_event =
  fun (ssn : ByStr20) =>
  fun (total_reward : Uint128) =>
    { _eventname : "SSN assign reward"; ssn_address : ssn; total_reward : total_reward }

let mk_withdraw_stake_rewards_event =
  fun (ssn : ByStr20) =>
  fun (total_reward: Uint128) =>
    { _eventname : "SSN withdraw reward"; ssn_address : ssn; withdraw_total_reward : total_reward }

 let mk_deposit_funds_event =
  fun (sender : ByStr20) =>
    { _eventname : "Verifier deposit funds"; verifier : sender }

 let mk_withdraw_below_stake_limit_event =
    fun (ssn : ByStr20) =>
    fun (minstake: Uint128) =>
      { _eventname : "SSN withdrawal below min_stake limit"; ssn_address : ssn; minstake_limit : minstake }

 let mk_withdraw_above_stake_event =
    fun (ssn : ByStr20) =>
      { _eventname : "SSN withdrawal above stake"; ssn_address : ssn }

 let mk_withdraw_stake_buffered_deposit_exist =
    fun (ssn : ByStr20) =>
    fun (buffdeposit: Uint128) =>
      { _eventname : "SSN withdrawal not allowed when some deposit is bufferred"; ssn_address : ssn; buffered_stake_amount : buffdeposit }

(* Ssn - active_status , stake_amount, rewards, urlraw, urlapi, buffereddeposit *)
type Ssn =
| Ssn of Bool Uint128 Uint128 String String Uint128

type SsnRewardShare =
| SsnRewardShare of ByStr20 Uint128

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract SSNList(
  init_admin : ByStr20,
  proxy_address : ByStr20
)

(* Mutable fields *)

field ssnlist : Map ByStr20 Ssn = Emp ByStr20 Ssn
field verifier : Option ByStr20 = None {ByStr20}
field minstake : Uint128 = Uint128 0
field maxstake : Uint128 = Uint128 0
field contractmaxstake : Uint128 = Uint128 0
field totalstakedeposit : Uint128 = Uint128 0
field contractadmin : ByStr20  = init_admin
field lastrewardblocknum : Uint32 = Uint32 0
field paused : Bool = True

(* Procedures *)

(* Can be called by the verifier only *)
procedure validate_verifier (initiator : ByStr20)
  verifier_l <- verifier;
  match verifier_l with
  | Some v =>
    is_verifier = builtin eq initiator v;
    match is_verifier with
    | True =>
    | False =>
      e = mk_verifier_validation_failed_error initiator;
      throw e
    end
  | None =>
    e = mk_admin_validation_failed_error initiator;
    throw e
  end
end

(* Can be called by the current contract admin only *)
procedure validate_admin (initiator : ByStr20)
  contractadmin_l <- contractadmin;
  is_admin = builtin eq initiator contractadmin_l;
  match is_admin with
  | True =>
  | False =>
    e = mk_admin_validation_failed_error initiator;
    throw e
  end
end

(* Can be called by the proxy only *)
procedure validate_proxy ()
  is_proxy = builtin eq _sender proxy_address;
  match is_proxy with
  | True =>
  | False =>
    e = mk_proxy_validation_failed_error _sender;
    throw e
  end
end

(* Can be called by the proxy only *)
procedure is_paused ()
  paused_l <- paused;
  match paused_l with
  | False =>
  | True =>
    e = mk_contract_freezed_error _sender;
    throw e
  end
end

(* Can be called by the contract admin only *)
(* It is expected that transfer only happens to an exterally owned account*)
procedure TransferFunds (tag: String, amount : Uint128, recipient : ByStr20)
    msg = {_tag : tag; _recipient : recipient; _amount : amount};
    msgs = one_msg msg;
    send msgs
end

(* Can be called by the proxy only *)
procedure update_stake_reward (entry : SsnRewardShare)
  match entry with
  | SsnRewardShare ssnaddr reward_percent =>
    curval <- ssnlist[ssnaddr];
    match curval with
    | None =>
      e = mk_ssn_not_exists_event ssnaddr;
      event e
    | Some (Ssn active_status stake_amount rewards urlraw urlapi buffereddeposit) =>
      hundred = Uint128 100;
      new_reward = builtin mul stake_amount reward_percent;
      new_reward = builtin div new_reward hundred;
      new_reward = builtin div new_reward uint128_10_power_7;
      total_reward = builtin add new_reward rewards;
      new_stake_amount = builtin add stake_amount buffereddeposit;
      ssn = Ssn active_status new_stake_amount total_reward urlraw urlapi uint128_zero;
      ssnlist[ssnaddr] := ssn;
      e = mk_assign_stake_reward_event ssnaddr total_reward;
      event e
    end
  end
end

(* Transitions *)

(* @dev: pause/freeze the contract. Used by admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition pause(initiator: ByStr20)
    validate_proxy;
    validate_admin initiator;
    paused := bool_active
end

(* @dev: unpause/unfreeze the contract. Used by admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition unpause(initiator: ByStr20)
    validate_proxy;
    validate_admin initiator;
    paused := bool_inactive
end

(* @dev: Set the admin of contract. Used by admin only. *)
(* @param admin: New admin value *)
(* @param initiator: The original caller who called the proxy *)
transition update_admin (admin : ByStr20, initiator: ByStr20)
  validate_proxy;
  validate_admin initiator;
  contractadmin := admin
end

(* @dev: Set the verifier of contract. Used by admin only. *)
(* @param verif: New verifier value *)
(* @param initiator: The original caller who called the proxy *)
transition update_verifier (verif : ByStr20, initiator: ByStr20)
  validate_proxy;
  validate_admin initiator;
  newverifier = Some {ByStr20} verif;
  verifier := newverifier
end

(* @dev: Drain the entire contract balance. Used by current admin only. *)
(* @param initiator: The original caller who called the proxy *)
transition drain_contract_balance (initiator : ByStr20)
  validate_proxy;
  validate_admin initiator;
  bal <- _balance;
  TransferFunds multisig_tag_addfunds bal initiator
end

(* @dev: Set the minstake of contract. Used by admin only. *)
(* @param min_stake: New minstake value *)
(* @param initiator: The original caller who called the proxy *)
transition update_minstake (min_stake : Uint128, initiator : ByStr20)
  is_paused;
  validate_proxy;
  validate_admin initiator;
  minstake := min_stake
end

(* @dev: Set the maxstake of contract. Used by admin only. *)
(* @param max_stake: New maxstake value *)
(* @param initiator: The original caller who called the proxy *)
transition update_maxstake (max_stake : Uint128, initiator : ByStr20)
  is_paused;
  validate_proxy;
  validate_admin initiator;
  maxstake := max_stake
end

(* @dev: Set the maxstake of contract. Used by admin only. *)
(* @param max_stake: New maxstake value *)
(* @param initiator: The original caller who called the proxy *)
transition update_contractmaxstake (max_stake : Uint128, initiator : ByStr20)
  is_paused;
  validate_proxy;
  validate_admin initiator;
  contractmaxstake := max_stake
end

(* @dev: Adds new ssn to ssnlist. Used by admin only. *)
(* @param ssnaddr: Address of the ssn to be added *)
(* @param stake_amount: Stake amount of ssn *)
(* @param rewards: Rewards of the ssn to be added *)
(* @param urlraw: string representing "ip:port" of the ssn serving raw api request *)
(* @param urlapi: string representing url exposed by ssn serving public api request *)
(* @param buffered_deposit: Any buffered stake deposit *)
(* @param initiator: The original caller who called the proxy *)
transition add_ssn (ssnaddr : ByStr20, stake_amount : Uint128, rewards : Uint128, urlraw : String, urlapi : String, buffered_deposit : Uint128, initiator : ByStr20)
  is_paused;
  validate_proxy;
  validate_admin initiator;
  already_exists <- exists ssnlist[ssnaddr];
  match already_exists with
  | True =>
    e = mk_ssn_already_exists_event ssnaddr;
    event e
  | False =>
    status = bool_active;
    pass = builtin eq stake_amount uint128_zero;
    match pass with
    | True =>
      (* stake amount is 0, so set status as inactive *)
      status = bool_inactive
    | False =>
      (* Update the total stake deposit *)
      totalstakedeposit_l <- totalstakedeposit;
      totalstakedeposit_l = builtin add totalstakedeposit_l stake_amount;
      totalstakedeposit := totalstakedeposit_l
    end;
    s = Ssn status stake_amount rewards urlraw urlapi buffered_deposit;
    ssnlist[ssnaddr] := s;
    e = mk_ssn_added_event ssnaddr;
    event e
  end
end

(* @dev: Remove a specific ssn from ssnlist. Used by admin only. *)
(* @param ssnaddr: Address of the ssn to be removed *)
(* @param initiator: The original caller who called the proxy *)
transition remove_ssn (ssnaddr : ByStr20, initiator: ByStr20)
  is_paused;
  validate_proxy;
  validate_admin initiator;
  already_exists <- exists ssnlist[ssnaddr];
  match already_exists with
  | False =>
    e = mk_ssn_not_exists_event ssnaddr;
    event e
  | True =>
    delete ssnlist[ssnaddr];
    e = mk_ssn_removed_event ssnaddr;
    event e
  end
end


(* @dev: Moves an amount tokens from initiator to the recipient. Used by token_owner. i.e. ssn *)
(* @dev: Stake amount of exisitng ssn in ssnlist will be updated with new amount only if existing stake amount is 0. Balance of contract account will increase. Balance of initiator will decrease.      *)
(* @param initiator: The original caller who called the proxy *)
transition stake_deposit (initiator: ByStr20)
  is_paused;
  validate_proxy;
  (* Accept the deposit from SSN and add to contract balance. *)
  (* Transfer back to initiator if any of the validation failed *)
  accept;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    TransferFunds empty_tag _amount initiator;
    e = mk_ssn_not_exists_event initiator;
    event e
  | Some (Ssn active_status stake_amount rewards urlraw urlapi buffereddeposit) =>
    (* check if first non-zero deposit *)
    minstake_l <- minstake;
    maxstake_l <- maxstake;
    new_buff_amount = builtin add _amount buffereddeposit;
    new_stake_amount = builtin add new_buff_amount stake_amount;
    pass = builtin lt new_stake_amount minstake_l;
    match pass with
    | True => (* stake deposit below minstake limit *)
      TransferFunds empty_tag _amount initiator;
      e = mk_stake_deposit_below_stake_limit_event initiator new_stake_amount minstake_l;
      event e
    | False =>
      pass = builtin lt maxstake_l new_stake_amount;
      match pass with
      | True => (* stake deposit above maxstake limit *)
        TransferFunds empty_tag _amount initiator;
        e = mk_stake_deposit_above_stake_limit_event initiator new_stake_amount maxstake_l;
        event e
      | False =>
        totalstakedeposit_l <- totalstakedeposit;
        newStakeDeposit = builtin add totalstakedeposit_l _amount;
        contractmaxstake_l <- contractmaxstake;
        pass = builtin lt contractmaxstake_l newStakeDeposit;
        match pass with
        | True => (* total stake deposit for contract goes above contractmaxstake limit *)
          TransferFunds empty_tag _amount initiator;
          e = mk_total_stake_deposit_above_contract_stake_limit_event initiator new_stake_amount contractmaxstake_l;
          event e
        | False =>
          (* Check if its first time deposit *)
          pass = builtin eq stake_amount uint128_zero;
          match pass with
          | True =>
            ssn = Ssn bool_active _amount rewards urlraw urlapi uint128_zero;
            ssnlist[initiator] := ssn;
            e = mk_stake_deposit_event initiator _amount;
            event e
          | False =>
            (* Update new buffered deposit until next assign_stake_reward is finished *)
            ssn = Ssn bool_active stake_amount rewards urlraw urlapi new_buff_amount;
            ssnlist[initiator] := ssn
          end;
          (* Update the new total stake deposit of contract *)
          totalstakedeposit := newStakeDeposit
        end
      end
    end
  end
end

(* @dev: Assign stake reward to all ssn from ssnlist. Used by verifier only. *)
(* @param ssnrewardlist: List of SsnRewardShare *)
(* @param reward_blocknum: tx block num when ssns were verified *)
(* @param initiator: The original caller who called the proxy *)
transition assign_stake_reward (ssnreward_list : List SsnRewardShare, reward_blocknum : Uint32, initiator: ByStr20)
  is_paused;
  validate_proxy;
  validate_verifier initiator;
  forall ssnreward_list update_stake_reward;
  lastrewardblocknum := reward_blocknum
end

(* @dev: Withdraw stake reward. Used by ssn only. *)
(* @param initiator: The original caller who called the proxy *)
transition withdraw_stake_rewards (initiator : ByStr20)
  is_paused;
  validate_proxy;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    e = mk_ssn_not_exists_event initiator;
    event e
  | Some (Ssn active_status stake_amount rewards urlraw urlapi buffereddeposit) =>
    (* check if basic stake deposit is already withdrawn by ssn. If so, remove the ssn from list as well *)
    pass = builtin eq stake_amount uint128_zero;
    match pass with
    | True =>
      (* entire stake withdrawed and also reward is withdrawed, so remove ssn *)
      delete ssnlist[initiator]
    | False =>
    end;
    (* Update state to have 0 rewards. *)
    ssn = Ssn active_status stake_amount uint128_zero urlraw urlapi buffereddeposit;
    ssnlist[initiator] := ssn;
    TransferFunds empty_tag rewards initiator;
    e = mk_withdraw_stake_rewards_event initiator rewards;
    event e
  end
end

(* @dev: Move token amount from contract account to initiator. Used by ssn only. *)
(* @param amount: token amount to be withdrawed *)
(* @param initiator: The original caller who called the proxy *)
transition withdraw_stake_amount (amount : Uint128, initiator: ByStr20)
  is_paused;
  validate_proxy;
  curval <- ssnlist[initiator];
  match curval with
  | None =>
    e = mk_ssn_not_exists_event initiator;
    event e
  | Some (Ssn active_status stake_amount rewards urlraw urlapi buffereddeposit) =>
    pass = builtin eq buffereddeposit uint128_zero;
    match pass with
    | False =>
      e = mk_withdraw_stake_buffered_deposit_exist initiator buffereddeposit;
      event e
    | True =>
      pass = builtin lt amount stake_amount;
      match pass with
      | True => (* Partial withdrawal. so check for min balance after withdrawal for min stake limit *)
          bal_left = builtin sub stake_amount amount;
          minstake_l <- minstake;
          pass = builtin lt bal_left minstake_l;
          match pass with
          | True =>
            e = mk_withdraw_below_stake_limit_event initiator minstake_l;
            event e
          | False => (* pass minstake check for withdrawal *)
            (* Update the stake amount *)
            ssn = Ssn active_status bal_left rewards urlraw urlapi buffereddeposit;
            ssnlist[initiator] := ssn;
            (* Update the total stake deposit with contract *)
            totalstakedeposit_l <- totalstakedeposit;
            tmp = builtin sub totalstakedeposit_l amount;
            totalstakedeposit := tmp;
            TransferFunds empty_tag amount initiator
          end
      | False => (* requested withdrawal equals balance or greater than balance *)
          pass = builtin eq amount stake_amount;
          match pass with
          | False => (* withdrawal above available balance *)
            e = mk_withdraw_above_stake_event initiator;
            event e
          | True => (* pass withdrawal checks *)
            pass = builtin eq rewards uint128_zero;
            match pass with
            | True =>
              (* entire stake withdrawed and also reward is withdrawed, so remove ssn *)
              delete ssnlist[initiator]
            | False =>
              ssn = Ssn bool_inactive uint128_zero rewards urlraw urlapi buffereddeposit;
              ssnlist[initiator] := ssn
            end;
            totalstakedeposit_l <- totalstakedeposit;
            tmp = builtin sub totalstakedeposit_l amount;
            totalstakedeposit := tmp;
            TransferFunds empty_tag amount initiator
          end
        end
    end
  end
end

(* @dev: Move token amount from initiator to recipient i.e. contract address. *)
(* @param initiator: The original caller who called the proxy *)
transition deposit_funds (initiator : ByStr20)
  is_paused;
  validate_proxy;
  accept;
  e = mk_deposit_funds_event initiator;
  event e
end
